{"version":3,"file":"index.Bz10oVKO.js","sources":["../../../src/pages/Test/Test.tsx"],"sourcesContent":["import { useEffect, useId, useMemo, useState } from 'react';\nimport Button from '@src/components/Button';\nimport Input from '@src/components/Input';\nimport Select from '@src/components/Select';\nimport { SelectOption } from '@src/components/Select/types';\nimport Retry from '@src/components/svgs/Retry';\nimport VInCircle from '@src/components/svgs/VInCircle';\nimport XMark from '@src/components/svgs/XMark';\nimport Tooltip from '@src/components/Tooltip';\nimport { Placement } from '@src/components/Tooltip/types';\nimport TooltipTrigger from '@src/components/TooltipTrigger';\nimport { indexDBClient } from '@src/main';\nimport { MAX_WEIGHT } from '@src/utils/constants';\nimport { SelectionStrategies, selectKWords } from '@src/utils/selectKWords';\nimport { Category, type Word } from '@src/utils/types';\n\nconst ALL_WORDS = '---' as Category;\nconst wordsInTestCount = 10;\nconst emptyAnswers = Array.from(Array(wordsInTestCount)).map(() => '');\n\nconst categoryOptions: Array<SelectOption> = Object.entries(Category).map(([categoryName, categoryValue]) => ({\n  value: categoryValue,\n  label: categoryName,\n}));\ncategoryOptions.unshift({ value: ALL_WORDS, label: '---' });\n\nexport default function TestPage() {\n  const tooltipUniqueId = useId();\n  const [allWords, setAllWords] = useState<Array<Word>>([]);\n  const [selectedCategoryOption, setSelectedCategoryOption] = useState<SelectOption>(categoryOptions[0]!);\n  const [showResults, setShowResults] = useState<boolean>();\n\n  const [wordsWithUpdatedScore, setWordsWithUpdatedScore] = useState<Array<Word>>([]);\n\n  const randomWords = useMemo(\n    () => {\n      const wordsToChooseFrom =\n        selectedCategoryOption.value === ALL_WORDS\n          ? allWords\n          : allWords.filter((word) => word.categories.includes(selectedCategoryOption.value as Category));\n\n      const selectedWords = selectKWords({\n        data: wordsToChooseFrom,\n        strategy: SelectionStrategies.Knowledge,\n        wordCount: wordsInTestCount,\n      });\n\n      return selectedWords;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [allWords, selectedCategoryOption],\n  );\n\n  const [answers, setAnswers] = useState<Array<string>>(() => emptyAnswers);\n\n  const handleCheckClick = () => {\n    setShowResults(true);\n\n    const wordsToUpdateArr: Array<Word> = [];\n\n    randomWords.forEach((randomWord, index) => {\n      const { id, spelling } = randomWord;\n\n      const isCorrectAnswer = spelling === answers[index];\n\n      if (!isCorrectAnswer) return;\n\n      const wordWithUpdatedScore: Word = { ...randomWord, points: Math.min(randomWord.points + 1, MAX_WEIGHT) };\n\n      // 1. This is for updating the in memory allWords\n      wordsToUpdateArr.push(wordWithUpdatedScore);\n\n      // 2. This is for updating the Database\n      // NOTE! The update will only be relevant on page load!\n      indexDBClient.update(id!, wordWithUpdatedScore);\n    });\n\n    setWordsWithUpdatedScore(wordsToUpdateArr);\n  };\n\n  useEffect(() => {\n    async function fetchAllWords() {\n      const fetchedWords = (await indexDBClient.readAll()) as Array<Word>;\n\n      setAllWords(fetchedWords);\n    }\n\n    fetchAllWords();\n  }, []);\n\n  const handleNextTestClick = () => {\n    setAnswers(emptyAnswers);\n    setShowResults(false);\n\n    setAllWords((prevAllWords) =>\n      prevAllWords.map((prevWord) => {\n        const wordWithUpdatedScore = wordsWithUpdatedScore.find((w) => w.id === prevWord.id);\n\n        return wordWithUpdatedScore ?? prevWord;\n      }),\n    );\n  };\n\n  const handleRetryTestClick = () => {\n    setAnswers(emptyAnswers);\n    setShowResults(false);\n  };\n\n  const handleCategoryChange = (value: SelectOption) => {\n    setSelectedCategoryOption(value);\n    handleRetryTestClick();\n  };\n\n  if (!allWords.length) return null;\n\n  return (\n    <div className='flex size-full flex-col items-center justify-center gap-10 overflow-auto p-6'>\n      <Select selectedOption={selectedCategoryOption} setOption={handleCategoryChange} options={categoryOptions} />\n\n      <div className='flex w-full max-w-md flex-col gap-3 rounded-md border p-4'>\n        {randomWords.map(({ spelling, meaning, soundsLike }, index) => {\n          const isCorrectAnswer = spelling === answers[index];\n\n          return (\n            <div key={index} className='flex h-10 w-full items-center justify-between gap-10'>\n              <div title={soundsLike}>{meaning[0]}</div>\n\n              <div className='flex h-full items-center gap-2'>\n                <Input\n                  value={answers[index]!}\n                  setValue={(value) => setAnswers((prevAnswers) => prevAnswers.with(index, value))}\n                  className='!w-36'\n                />\n\n                <div className='h-full w-6'>\n                  <TooltipTrigger groupId={tooltipUniqueId} contentOverride={spelling}>\n                    {showResults && (\n                      <div className='flex h-full items-center justify-center'>\n                        {isCorrectAnswer ? (\n                          <VInCircle className='h-1/2' borderColor='#19d23a' color='#19d23a' />\n                        ) : (\n                          <XMark className='h-1/2 stroke-red-500' />\n                        )}\n                      </div>\n                    )}\n                  </TooltipTrigger>\n                </div>\n              </div>\n\n              <Tooltip groupId={tooltipUniqueId} place={Placement.Top} isClickable className='!p-3' />\n            </div>\n          );\n        })}\n      </div>\n\n      <div className='flex w-full max-w-md items-center justify-between gap-4'>\n        <Button content='Check' onClick={handleCheckClick} className='h-10 w-24' />\n\n        <Button\n          content='retry'\n          onClick={handleRetryTestClick}\n          className='flex flex-col-reverse items-center justify-center gap-1 bg-neutral-600 hover:bg-neutral-700 active:bg-neutral-800'\n        >\n          <Retry className='size-4' />\n        </Button>\n\n        <Button\n          content='Next'\n          onClick={handleNextTestClick}\n          className='h-10 w-24 bg-green-600 hover:bg-green-700 active:bg-green-800'\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":["ALL_WORDS","wordsInTestCount","emptyAnswers","categoryOptions","Category","categoryName","categoryValue","TestPage","tooltipUniqueId","useId","allWords","setAllWords","useState","selectedCategoryOption","setSelectedCategoryOption","showResults","setShowResults","wordsWithUpdatedScore","setWordsWithUpdatedScore","randomWords","useMemo","wordsToChooseFrom","word","selectKWords","SelectionStrategies","answers","setAnswers","handleCheckClick","wordsToUpdateArr","randomWord","index","id","spelling","wordWithUpdatedScore","MAX_WEIGHT","indexDBClient","useEffect","fetchAllWords","fetchedWords","handleNextTestClick","prevAllWords","prevWord","w","handleRetryTestClick","handleCategoryChange","value","jsxs","jsx","Select","meaning","soundsLike","isCorrectAnswer","Input","prevAnswers","TooltipTrigger","VInCircle","XMark","Tooltip","Placement","Button","Retry"],"mappings":"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"}