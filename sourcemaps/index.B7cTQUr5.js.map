{"version":3,"file":"index.CVVgfjmp.js","sources":["../../../src/components/Button/Button.tsx","../../../src/components/Input/Input.tsx","../../../src/components/svgs/Retry/Retry.tsx","../../../src/components/svgs/VInCircle/VInCircle.tsx","../../../src/components/svgs/XMark/XMark.tsx","../../../src/utils/constants/wordBank/animals.ts","../../../src/utils/constants/wordBank/bodyRelation.ts","../../../src/utils/constants/wordBank/colors.ts","../../../src/utils/constants/wordBank/countries.ts","../../../src/utils/constants/wordBank/drinks.ts","../../../src/utils/constants/wordBank/food.ts","../../../src/utils/constants/wordBank/greetings.ts","../../../src/utils/constants/wordBank/jobs.ts","../../../src/utils/constants/wordBank/other.ts","../../../src/utils/constants/wordBank/questions.ts","../../../src/utils/constants/wordBank/index.ts","../../../src/utils/getRandomObjects.ts","../../../src/utils/selectWeightedItem.ts","../../../src/pages/Test/logic/selectKWords.ts","../../../src/pages/Test/Test.tsx"],"sourcesContent":["import type { PropsWithChildren, ReactNode } from 'react';\nimport clsx from 'clsx';\n\ntype ButtonProps = PropsWithChildren<{\n  onClick: (e: any) => void;\n  content: ReactNode;\n  disabled?: boolean;\n  className?: string;\n}>;\n\nexport default function Button(props: ButtonProps) {\n  const { content, onClick, disabled, children, className } = props;\n\n  return (\n    <button\n      type='button'\n      onClick={onClick}\n      disabled={disabled}\n      className={clsx(\n        'cursor-pointer rounded-md border border-black bg-blue-500 px-2 py-1 text-white hover:rounded-lg hover:bg-blue-600 active:bg-blue-700',\n        className,\n      )}\n    >\n      {content}\n      {children}\n    </button>\n  );\n}\n","import clsx from 'clsx';\n\ntype InputProps = {\n  value: string;\n  setValue: (value: any) => void;\n  type?: 'text';\n  placeholder?: React.HTMLInputTypeAttribute;\n  disabled?: boolean;\n  className?: string;\n};\n\nexport default function Input(props: InputProps) {\n  const { value, setValue, type = 'text', placeholder = '', disabled, className } = props;\n\n  return (\n    <input\n      type={type}\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      placeholder={placeholder}\n      disabled={disabled}\n      className={clsx('h-10 w-72 rounded-md border border-black p-2 dark:bg-slate-900', className)}\n    />\n  );\n}\n","type RetryProps = {\n  color?: string;\n  title?: string;\n  className?: string;\n};\n\nexport default function Retry(props: RetryProps) {\n  const { className, color, title = 'retry' } = props;\n\n  return (\n    <svg\n      stroke={color}\n      className={className}\n      version='1.1'\n      viewBox='0 0 41.228 37.1'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <title>{title}</title>\n\n      <path d='m18.533 37.1a18.55 18.55 0 1 1 18-23.1l1.18-1.3a2.0147 2.0147 0 0 1 3 2.69l-4.18 4.53a2 2 0 0 1-3.48-1.34 14.56 14.56 0 1 0-14.52 14.52 14.41 14.41 0 0 0 10.45-4.43 2.0014 2.0014 0 0 1 2.88 2.78 18.38 18.38 0 0 1-13.33 5.65z' />\n      <path d='m35.043 20.55a2 2 0 0 1-0.91-0.22l-4.7-2.41a2.0014 2.0014 0 1 1 1.83-3.56l4.69 2.41a2 2 0 0 1-0.91 3.78z' />\n    </svg>\n  );\n}\n","type VInCircleProps = {\n  color?: string;\n  fillColor?: string;\n  borderColor?: string;\n  title?: string;\n  className?: string;\n};\n\nexport default function VInCircle(props: VInCircleProps) {\n  const { color = 'black', fillColor = 'none', borderColor, title = 'v in a circle', className } = props;\n\n  return (\n    <svg\n      viewBox='0 0 20 20'\n      stroke={color}\n      strokeLinecap='round'\n      strokeLinejoin='round'\n      strokeWidth='1.5'\n      className={className}\n    >\n      <title>{title}</title>\n\n      <circle cx='10' cy='10' r='9' stroke={borderColor || color} fill={fillColor} />\n      <line x1='8.7' y1='13' x2='14.2' y2='7' />\n      <line x1='5.9' y1='10.33' x2='8.7' y2='13' />\n    </svg>\n  );\n}\n","type XMarkProps = {\n  color?: string;\n  title?: string;\n  className?: string;\n};\n\nexport default function XMark(props: XMarkProps) {\n  const { color = 'currentColor', className, title = 'x mark' } = props;\n\n  return (\n    <svg viewBox='0 0 100 100' strokeWidth={8} stroke={color} strokeLinecap='round' className={className}>\n      <title>{title}</title>\n\n      <line x1='20' y1='20' x2='80' y2='80' />\n      <line x1='20' y1='80' x2='80' y2='20' />\n    </svg>\n  );\n}\n","import { Category, type Word } from '@src/utils/types';\n\nexport const singularAnimals: Array<Word> = [\n  {\n    spelling: 'лошадь',\n    soundsLike: '**LO**SHED',\n    meaning: ['horse'],\n    pluralForeignKey: 'лошади',\n    points: 0,\n    categories: [Category.Animals],\n  },\n  {\n    spelling: 'кошка',\n    soundsLike: '**KO**SHKA',\n    meaning: ['cat'],\n    pluralForeignKey: 'кошки',\n    points: 0,\n    categories: [Category.Animals],\n  },\n  {\n    spelling: 'собака',\n    soundsLike: 'SA**BA**KA',\n    meaning: ['dog'],\n    // pluralForeignKey: '',\n    points: 0,\n    categories: [Category.Animals],\n  },\n  {\n    spelling: 'орёл',\n    soundsLike: 'AR**YOL**',\n    meaning: ['eagle'],\n    // pluralForeignKey: '',\n    points: 0,\n    categories: [Category.Animals],\n  },\n  // {\n  //   main: {\n  //     spelling: '',\n  //     soundsLike: '',\n  //     meaning: [''],\n  //   },\n  //   categories: [Category.Animals],\n  // },\n];\n\nexport const pluralAnimals: Array<Word> = [\n  {\n    spelling: 'лошади',\n    soundsLike: '**LO**SHEDI',\n    meaning: ['horses'],\n    singularForeignKey: 'лошадь',\n    points: 0,\n    categories: [Category.Animals],\n  },\n  {\n    spelling: 'кошки',\n    soundsLike: '**KO**SHKI',\n    meaning: ['cats'],\n    singularForeignKey: 'кошка',\n    points: 0,\n    categories: [Category.Animals],\n  },\n  // {\n  //   main: {\n  //     spelling: '',\n  //     soundsLike: '',\n  //     meaning: [''],\n  //   },\n  //   categories: [Category.Animals],\n  // },\n];\n\nexport const animals = [...singularAnimals, ...pluralAnimals];\n","import { Category } from '@src/utils/types';\n\nexport const bodyRelation = [\n  {\n    spelling: 'я',\n    soundsLike: 'YA',\n    meaning: ['I'],\n    points: 0,\n    categories: [Category.BodyRelation],\n  },\n  {\n    spelling: 'он',\n    soundsLike: 'ON',\n    meaning: ['he'],\n    points: 0,\n    categories: [Category.BodyRelation],\n  },\n  {\n    spelling: 'она',\n    soundsLike: 'A**NA**',\n    meaning: ['she'],\n    points: 0,\n    categories: [Category.BodyRelation],\n  },\n  {\n    spelling: 'мы',\n    soundsLike: 'MUI',\n    meaning: ['we'],\n    points: 0,\n    categories: [Category.BodyRelation],\n  },\n  {\n    spelling: 'они',\n    soundsLike: 'ANI',\n    meaning: ['they'],\n    points: 0,\n    categories: [Category.BodyRelation],\n  },\n  {\n    spelling: 'ты',\n    soundsLike: 'TI',\n    meaning: ['you (single)'],\n    points: 0,\n    categories: [Category.BodyRelation],\n  },\n  {\n    spelling: 'вы',\n    soundsLike: 'VUI',\n    meaning: ['you (plural)'],\n    points: 0,\n    categories: [Category.BodyRelation],\n  },\n];\n","import { Category, type Word } from '@src/utils/types';\n\nexport const colors: Array<Word> = [\n  {\n    spelling: 'красный',\n    soundsLike: '**KRA**SNII',\n    meaning: ['red'],\n    points: 0,\n    categories: [Category.Colors],\n  },\n  // {\n  //   main: {\n  //     spelling: '',\n  //     soundsLike: '',\n  //     meaning: [''],\n  //   },\n  //   categories: [Category.Colors],\n  // },\n];\n","import { Category, type Word } from '@src/utils/types';\n\nexport const countries: Array<Word> = [\n  {\n    spelling: 'америка',\n    soundsLike: 'A**ME**RIKA',\n    meaning: ['America'],\n    points: 0,\n    categories: [Category.Countries],\n  },\n  {\n    spelling: 'бразилия',\n    soundsLike: 'BRA**ZIL**IA',\n    meaning: ['Brazil'],\n    points: 0,\n    categories: [Category.Countries],\n  },\n  {\n    spelling: 'канада',\n    soundsLike: 'KA**NA**DA',\n    meaning: ['Canada'],\n    points: 0,\n    categories: [Category.Countries],\n  },\n  {\n    spelling: 'россия',\n    soundsLike: 'RA**SIA**',\n    meaning: ['Russia'],\n    points: 0,\n    categories: [Category.Countries],\n  },\n  {\n    spelling: 'италия',\n    soundsLike: 'I**TA**LIYA',\n    meaning: ['Italy'],\n    points: 0,\n    categories: [Category.Countries],\n  },\n  {\n    spelling: 'монголия',\n    soundsLike: 'MAN**GO**LIYA',\n    meaning: ['Mongolia'],\n    points: 0,\n    categories: [Category.Countries],\n  },\n  {\n    spelling: 'украина',\n    soundsLike: 'UKRA**INA**',\n    meaning: ['Ukraine'],\n    points: 0,\n    categories: [Category.Countries],\n  },\n  // {\n  //   main: {\n  //     spelling: '',\n  //     soundsLike: '',\n  //     meaning: [''],\n  //   },\n  //   categories: [Category.Countries],\n  // },\n];\n","import { Category } from '@src/utils/types';\n\nexport const drinks = [\n  {\n    spelling: 'чай',\n    soundsLike: 'CHAI',\n    meaning: ['tea'],\n    points: 0,\n    categories: [Category.Drinks],\n  },\n  {\n    spelling: 'кофе',\n    soundsLike: '**KO**FИ',\n    meaning: ['coffee'],\n    points: 0,\n    categories: [Category.Drinks],\n  },\n  {\n    spelling: 'сок',\n    soundsLike: 'SOK',\n    meaning: ['juice'],\n    points: 0,\n    categories: [Category.Drinks],\n  },\n  {\n    spelling: 'вино',\n    soundsLike: 'VI**NO**',\n    meaning: ['wine'],\n    points: 0,\n    categories: [Category.Drinks],\n  },\n  {\n    spelling: 'вода',\n    soundsLike: 'VADA',\n    meaning: ['water'],\n    points: 0,\n    categories: [Category.Drinks, Category.Other],\n  },\n];\n","import { Category, type Word } from '@src/utils/types';\n\nexport const food: Array<Word> = [\n  {\n    spelling: 'яблоко',\n    soundsLike: '**YA**BLAKA',\n    meaning: ['apple'],\n    pluralForeignKey: 'яблоки',\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'яблоки',\n    soundsLike: '**YA**BLAKI',\n    meaning: ['apples'],\n    singularForeignKey: 'яблоко',\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'яйцо',\n    soundsLike: '*YA**ICHO',\n    meaning: ['egg'],\n    pluralForeignKey: 'яйца',\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'яйца',\n    soundsLike: '**YA**ICHA',\n    meaning: ['eggs'],\n    singularForeignKey: 'яйцо',\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'пицца',\n    soundsLike: 'PICHA',\n    meaning: ['pizza'],\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'хлеб',\n    soundsLike: 'HLEB',\n    meaning: ['bread'],\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'банан',\n    soundsLike: 'BANAN',\n    meaning: ['banana'],\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'мясо',\n    soundsLike: 'MI**YA**SA',\n    meaning: ['meat'],\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'суп',\n    soundsLike: 'SUP',\n    meaning: ['soup'],\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'молоко',\n    soundsLike: 'MALA**KO**',\n    meaning: ['milk'],\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'сыр',\n    soundsLike: 'SIER',\n    meaning: ['cheese'],\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'бекон',\n    soundsLike: 'BICON',\n    meaning: ['bacon'],\n    points: 0,\n    categories: [Category.Food],\n  },\n  {\n    spelling: 'салат',\n    soundsLike: 'SALAT',\n    meaning: ['salad'],\n    points: 0,\n    categories: [Category.Food],\n  },\n  // {\n  //   main: {\n  //     spelling: '',\n  //     soundsLike: '',\n  //     meaning: [''],\n  //   },\n  //   categories: [Category.Food],\n  // },\n];\n","import { Category, type Word } from '@src/utils/types';\n\nexport const greetings: Array<Word> = [\n  {\n    spelling: 'до свидания',\n    soundsLike: 'DA SVIDANIYA',\n    meaning: ['goodbye'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'добро пожаловать',\n    soundsLike: 'DAB**RO** PA**ZHA**LOVET',\n    meaning: ['welcome'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'до завтра',\n    soundsLike: 'DA ZAVTRA',\n    meaning: ['see you tomorrow'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'как дела',\n    soundsLike: 'KAK DYELA',\n    meaning: ['how are you?'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'хорошо',\n    soundsLike: 'HARASHO',\n    meaning: ['fine', 'ok'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'спокойной ночи',\n    soundsLike: 'SPAKOINI NOCHI',\n    meaning: ['good night'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'пока',\n    soundsLike: 'PA**KA**',\n    meaning: ['bye'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'пожалуйста',\n    soundsLike: 'PA**ZHA**LUISTA',\n    meaning: ['please'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'извините',\n    soundsLike: 'IZVINITY',\n    meaning: ['excuse me', 'sorry'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'привет',\n    soundsLike: '**PRI**VYET',\n    meaning: ['hi', 'hello'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  {\n    spelling: 'спосибо',\n    soundsLike: 'SPA**SI**BA',\n    meaning: ['thank you'],\n    points: 0,\n    categories: [Category.Greetings],\n  },\n  // {\n  //   main: {\n  //     spelling: '',\n  //     soundsLike: '',\n  //     meaning: [''],\n  //   },\n  //   categories: [Category.Greetings],\n  // },\n];\n","import { Category, type Word } from '@src/utils/types';\n\nexport const jobs: Array<Word> = [\n  {\n    spelling: 'актёр',\n    soundsLike: 'AKTIOR',\n    meaning: ['actor'],\n    pluralForeignKey: 'актёры',\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'актёры',\n    soundsLike: 'AKTYORI',\n    meaning: ['actors'],\n    singularForeignKey: 'актёр',\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'тренер',\n    soundsLike: '**TRAI**NER',\n    meaning: ['coach'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'капитан',\n    soundsLike: '**KA**PITAN',\n    meaning: ['captain'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'повар',\n    soundsLike: '**PO**VAR',\n    meaning: ['cook'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'доктор',\n    soundsLike: '**DOK**TOR',\n    meaning: ['doctor'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'инженер',\n    soundsLike: '**EN**ZHINIR',\n    meaning: ['engineer'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'учитель',\n    soundsLike: \"U**CH'I**TYEL\",\n    meaning: ['teacher'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'психолог',\n    soundsLike: 'PSI**HO**LOG',\n    meaning: ['psychologist'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'политик',\n    soundsLike: 'PA**LI**TIC',\n    meaning: ['politician'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'музыкант',\n    soundsLike: 'MOOZI**KANT**',\n    meaning: ['musician'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n  {\n    spelling: 'пилот',\n    soundsLike: 'PI**LOT**',\n    meaning: ['pilot'],\n    points: 0,\n    categories: [Category.Jobs],\n  },\n];\n","import { Category, type Word } from '@src/utils/types';\n\nexport const other: Array<Word> = [\n  {\n    spelling: 'друг',\n    soundsLike: 'DROOG',\n    meaning: ['friend'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'здесь',\n    soundsLike: 'ZDIS',\n    meaning: ['here'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'там',\n    soundsLike: 'TAM',\n    meaning: ['there'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'это',\n    soundsLike: 'ETA', // ETAT ETI\n    meaning: ['this'],\n    // metadata: ['етот', 'эти']\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'тарелка',\n    soundsLike: 'TAREILKA',\n    meaning: ['plate'],\n\n    pluralForeignKey: 'тарелки',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'тарелки',\n    soundsLike: 'TAREILKI',\n    meaning: ['plates'],\n    singularForeignKey: 'тарелка',\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'мальчик',\n    soundsLike: '**MAL**CHIK',\n    meaning: ['boy'],\n    pluralForeignKey: 'мальчики',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'мальчики',\n    soundsLike: '**MAL**CHIKI',\n    meaning: ['boys'],\n    singularForeignKey: 'мальчик',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'девочка',\n    soundsLike: '**DYE**VOCHKA',\n    meaning: ['girl'],\n    pluralForeignKey: 'девочки',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'девочки',\n    soundsLike: '**DYE**VOCHKI',\n    meaning: ['girls'],\n    singularForeignKey: 'девочка',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'дети',\n    soundsLike: '**DEY**TI',\n    meaning: ['children'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'мужчина',\n    soundsLike: \"MUI**ZHCH'I**NA\",\n    meaning: ['man'],\n    pluralForeignKey: 'мужчины',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'мужчины',\n    soundsLike: 'MUI**SHI**NI',\n    meaning: ['men'],\n    singularForeignKey: 'мужчина',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'женщина',\n    soundsLike: '**ZHEN**SHINA',\n    meaning: ['woman'],\n\n    pluralForeignKey: 'женщины',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'женщины',\n    soundsLike: '**ZHEN**SHINIE',\n    meaning: ['women'],\n    singularForeignKey: 'женщина',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'дом',\n    soundsLike: 'DOM',\n    meaning: ['house'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'офис',\n    soundsLike: '**O**FIS',\n    meaning: ['office'],\n\n    pluralForeignKey: 'офисы',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'офисы',\n    soundsLike: '**O**FISI',\n    meaning: ['offices'],\n    singularForeignKey: 'офис',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'метро',\n    soundsLike: 'MET**RO**',\n    meaning: ['subway'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'человек',\n    soundsLike: 'CHELA**VEK**',\n    meaning: ['person'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'озеро',\n    soundsLike: '**O**ZIRA',\n    meaning: ['lake'],\n    pluralForeignKey: 'озёра',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'озёра',\n    soundsLike: 'AZ**YO**RA',\n    meaning: ['lakes'],\n    singularForeignKey: 'озеро',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'тетрадь',\n    soundsLike: 'TET**RAD**',\n    meaning: ['notebook'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'стол',\n    soundsLike: 'STOL',\n    meaning: ['table'],\n    pluralForeignKey: 'столы',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'столы',\n    soundsLike: 'STA**LUI**',\n    meaning: ['tables'],\n    singularForeignKey: 'стол',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'полотенце',\n    soundsLike: 'PALA**TIEN**TSYE',\n    meaning: ['towel'],\n    pluralForeignKey: 'полотенца',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'полотенца',\n    soundsLike: 'PALA**TIEN**TSA',\n    meaning: ['towels'],\n    singularForeignKey: 'полотенце',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'телефон',\n    soundsLike: 'TYELEPHON',\n    meaning: ['phone'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'такси',\n    soundsLike: 'TAKSI',\n    meaning: ['taxi'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'план',\n    soundsLike: 'PLAN',\n    meaning: ['plan'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'ребёнок',\n    soundsLike: 'REB**YO**NAK',\n    meaning: ['child', 'baby'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'велосипед',\n    soundsLike: 'VELOSIP**YED**',\n    meaning: ['bicycle'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'ну',\n    soundsLike: 'NU',\n    meaning: ['well'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'всё',\n    soundsLike: 'VSO',\n    meaning: ['everything', 'all', 'anything'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'уже',\n    soundsLike: 'UZHE',\n    meaning: ['already'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'конечно',\n    soundsLike: 'KANI**YECH**NA',\n    meaning: ['of course'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'утро',\n    soundsLike: 'UTRA',\n    meaning: ['morning'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'кафе',\n    soundsLike: 'KAFE',\n    meaning: ['cafe'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n\n  {\n    spelling: 'парк',\n    soundsLike: 'PARK',\n    meaning: ['park'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'добрый',\n    soundsLike: 'DOBREY',\n    meaning: ['good', 'kind', 'nice'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'дела',\n    soundsLike: 'DYELA',\n    meaning: ['matter', 'business', 'case'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'день',\n    soundsLike: 'DYЕN',\n    meaning: ['day'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'вечер',\n    soundsLike: '**VYE**CHER',\n    meaning: ['evening'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'город',\n    soundsLike: '**GO**RAD',\n    meaning: ['city'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'свитер',\n    soundsLike: '**SVI**TER',\n    meaning: ['Sweater'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'или',\n    soundsLike: '**I**LI',\n    meaning: ['or'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'рюкзак',\n    soundsLike: '**RIU**KZAK',\n    meaning: ['backpack'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'да',\n    soundsLike: 'DA',\n    meaning: ['yes'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'нет',\n    soundsLike: 'NYET',\n    meaning: ['no'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'меню',\n    soundsLike: 'MENU',\n    meaning: ['menu'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'сон',\n    soundsLike: 'SON',\n    meaning: ['dream'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'маленький',\n    soundsLike: 'MALYENKI',\n    meaning: ['small'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'жаль',\n    soundsLike: 'ZHAL',\n    meaning: ['what a pity', 'it is a pitty', 'sorry'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'йога',\n    soundsLike: 'YOGA',\n    meaning: ['yoga'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'шорты',\n    soundsLike: 'SHORTI',\n    meaning: ['shorts'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'кровать',\n    soundsLike: 'KRA**VAT**',\n    meaning: ['bed'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'тоже',\n    soundsLike: '**TO**ZHE',\n    meaning: ['also', 'too'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'туалет',\n    soundsLike: '**TU**ALET',\n    meaning: ['toilet', 'bathroom'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'камень',\n    soundsLike: '**KA**MYEN',\n    meaning: ['stone'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'дверь',\n    soundsLike: 'DVIR',\n    meaning: ['door'],\n    pluralForeignKey: 'двери',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'двери',\n    soundsLike: 'DVIRI',\n    meaning: ['doors'],\n    singularForeignKey: 'дверь',\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'карандаш',\n    soundsLike: 'KARAN**DASH**',\n    meaning: ['pencil'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'дерево',\n    soundsLike: 'DYEREVA',\n    meaning: ['tree'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'далеко',\n    soundsLike: 'DALIE**KO**',\n    meaning: ['far away'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'площадь',\n    soundsLike: '**PLO**SHID',\n    meaning: ['square (place)'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'на',\n    soundsLike: 'NA',\n    meaning: ['on', 'is on', 'there is...on'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'страшно',\n    soundsLike: '**STRASH**NA',\n    meaning: ['scary'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'акно',\n    soundsLike: 'AK**NO**',\n    meaning: ['window'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  {\n    spelling: 'стул',\n    soundsLike: 'STOOL',\n    meaning: ['chair'],\n\n    points: 0,\n    categories: [Category.Other],\n  },\n  // {\n  //\n  //     spelling: '',\n  //     soundsLike: '',\n  //     meaning: [''],\n  //   },\n  //   categories: [Category.Other],\n  // },\n];\n","import { Category, type Word } from '@src/utils/types';\n\nexport const questions: Array<Word> = [\n  {\n    spelling: 'где',\n    soundsLike: 'GDE',\n    meaning: ['where'],\n    points: 0,\n    categories: [Category.QuestionWord],\n  },\n  {\n    spelling: 'кто',\n    soundsLike: 'KTO',\n    meaning: ['who'],\n    points: 0,\n    categories: [Category.QuestionWord],\n  },\n  {\n    spelling: 'что',\n    soundsLike: 'SHTO',\n    meaning: ['what'],\n    points: 0,\n    categories: [Category.QuestionWord],\n  },\n  {\n    spelling: 'когда',\n    soundsLike: 'KAGDA',\n    meaning: ['when'],\n    points: 0,\n    categories: [Category.QuestionWord],\n  },\n  {\n    spelling: 'который',\n    soundsLike: 'KATORI',\n    meaning: ['which'],\n    points: 0,\n    categories: [Category.QuestionWord],\n  },\n  {\n    spelling: 'почему',\n    soundsLike: 'PACHIMU',\n    meaning: ['why'],\n    points: 0,\n    categories: [Category.QuestionWord],\n  },\n  {\n    spelling: 'сколько',\n    soundsLike: '**SKO**LKA',\n    meaning: ['how much'],\n    points: 0,\n    categories: [Category.QuestionWord],\n  },\n  {\n    spelling: 'как',\n    soundsLike: 'KAK',\n    meaning: ['how'],\n    points: 0,\n    categories: [Category.QuestionWord],\n  },\n];\n","import { animals } from './animals';\nimport { bodyRelation } from './bodyRelation';\nimport { colors } from './colors';\nimport { countries } from './countries';\nimport { drinks } from './drinks';\nimport { food } from './food';\nimport { greetings } from './greetings';\nimport { jobs } from './jobs';\nimport { other } from './other';\nimport { questions } from './questions';\n\nexport const allWords = [\n  ...animals,\n  ...food,\n  ...drinks,\n  ...colors,\n  ...greetings,\n  ...jobs,\n  ...bodyRelation,\n  ...questions,\n  ...countries,\n  ...other,\n];\n","function getRandomObjects<T = any>(arr: Array<T>, itemsCount = 10) {\n  if (arr.length <= itemsCount) return arr;\n\n  const randomObjects: Array<T> = [];\n\n  const copyArr = [...arr];\n\n  for (let i = 0; i < itemsCount; i++) {\n    const randomIndex = Math.floor(Math.random() * copyArr.length);\n\n    randomObjects.push(copyArr.splice(randomIndex, 1)[0]!);\n  }\n\n  return randomObjects;\n}\n\nexport { getRandomObjects };\n","type SelectWeightedItemProps<T> = {\n  data: Array<T>;\n  getItemWeight: (obj: T) => number;\n  maxWeight: number;\n};\n\nexport function selectWeightedItem<T = any>(props: SelectWeightedItemProps<T>) {\n  const { data, getItemWeight, maxWeight } = props;\n\n  const totalWeight = data.reduce((sum, item) => sum + (maxWeight - getItemWeight(item) + 1), 0);\n\n  let randomValue = Math.random() * totalWeight;\n\n  for (const item of data) {\n    randomValue -= maxWeight - getItemWeight(item) + 1;\n    if (randomValue <= 0) return item;\n  }\n}\n","import { getRandomObjects } from '@src/utils/getRandomObjects';\nimport { selectWeightedItem } from '@src/utils/selectWeightedItem';\nimport type { Word } from '@src/utils/types';\n\nexport enum SelectionStrategies {\n  EvenChance = 'even-chance',\n  Knowledge = 'knowledge',\n}\n\ntype StrategyProps = {\n  data: Array<any>;\n  wordCount: number;\n};\n\nconst SELECTION_STRATEGIES = {\n  [SelectionStrategies.EvenChance]: (props: StrategyProps) => {\n    const { data } = props;\n\n    const result = getRandomObjects<Word>(data);\n\n    return result;\n  },\n  [SelectionStrategies.Knowledge]: (props: StrategyProps) => {\n    const { data, wordCount } = props;\n\n    const selectedWords: Array<Word> = [];\n\n    for (let i = 0; i < wordCount; i++) {\n      const currentlySelectedWord = selectWeightedItem<Word>({\n        data,\n        maxWeight: 20,\n        getItemWeight: (item: any) => item.points,\n      })!;\n\n      if (!selectedWords.find((word) => word.meaning === currentlySelectedWord?.meaning)) {\n        selectedWords.push(currentlySelectedWord);\n      } else {\n        i--;\n      }\n    }\n\n    return selectedWords;\n  },\n};\n\ntype SelectKWordsProps = {\n  data: Array<Word>;\n  wordCount?: number;\n  strategy?: SelectionStrategies;\n};\n\nfunction selectKWords(props: SelectKWordsProps) {\n  const { data, wordCount = 10, strategy = SelectionStrategies.EvenChance } = props;\n\n  const strategyMethod = SELECTION_STRATEGIES[strategy];\n\n  const selectedWords = strategyMethod({ data, wordCount });\n\n  return selectedWords;\n}\n\nexport { selectKWords };\n","import { useMemo, useState } from 'react';\nimport Button from '@src/components/Button';\nimport Input from '@src/components/Input';\nimport Retry from '@src/components/svgs/Retry';\nimport VInCircle from '@src/components/svgs/VInCircle';\nimport XMark from '@src/components/svgs/XMark';\nimport { useLocalStorage } from '@src/hooks/useLocalStorage';\nimport { allWords } from '@src/utils/constants/wordBank';\nimport { SelectionStrategies, selectKWords } from './logic/selectKWords';\n\ntype WordScore = {\n  word: string;\n  score: number;\n};\n\nconst wordsInTestCount = 10;\nconst emptyAnswers = Array.from(Array(wordsInTestCount)).map(() => '');\n\nexport default function TestPage() {\n  const [showResults, setShowResults] = useState<boolean>();\n  const [shuffleValue, setShuffleValue] = useState<number>(0);\n\n  const [wordsScore, setWordsScore] = useLocalStorage<Array<WordScore>>(\n    'words',\n    allWords.map((w) => ({ word: w.spelling, score: 0 })),\n  );\n\n  wordsScore;\n\n  const randomWords = useMemo(\n    () => selectKWords({ data: allWords, strategy: SelectionStrategies.Knowledge, wordCount: wordsInTestCount }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [shuffleValue],\n  );\n\n  const [answers, setAnswers] = useState<Array<string>>(() => emptyAnswers);\n\n  const handleCheckClick = () => {\n    setShowResults(true);\n\n    randomWords.forEach(({ spelling }, index) => {\n      const isCorrectAnswer = spelling === answers[index];\n\n      if (isCorrectAnswer) {\n        const updatedWordScoresArr = wordsScore.map((wordScore) => {\n          if (wordScore.word === spelling) {\n            const updatedWordScore: WordScore = { word: wordScore.word, score: wordScore.score + 1 };\n            return updatedWordScore;\n          }\n\n          return wordScore;\n        });\n\n        setWordsScore(updatedWordScoresArr);\n      }\n    });\n  };\n\n  const handleNextTestClick = () => {\n    setAnswers(emptyAnswers);\n    setShowResults(false);\n    setShuffleValue((prev) => prev + (1 % 3));\n  };\n\n  const handleRetryTestClick = () => {\n    setAnswers(emptyAnswers);\n    setShowResults(false);\n  };\n\n  return (\n    <div className='flex size-full flex-col items-center justify-center gap-10 p-6'>\n      <div className='flex w-full max-w-md flex-col gap-3 rounded-md border p-4'>\n        {randomWords.map(({ spelling, meaning }, index) => {\n          const isCorrectAnswer = spelling === answers[index];\n\n          return (\n            <div key={index} className='flex h-10 w-full items-center justify-between gap-10'>\n              <div>{meaning[0]}</div>\n\n              <div className='flex h-full items-center gap-2'>\n                <Input\n                  value={answers[index]!}\n                  setValue={(value) => setAnswers((prevAnswers) => prevAnswers.with(index, value))}\n                  className='!w-52'\n                />\n\n                <div className='h-full w-12'>\n                  {showResults && (\n                    <div className='flex h-full items-center justify-center'>\n                      {isCorrectAnswer ? (\n                        <VInCircle className='h-1/2' borderColor='#19d23a' color='#19d23a' />\n                      ) : (\n                        <XMark className='h-1/2 stroke-red-500' />\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className='flex w-full max-w-md items-center justify-between gap-4'>\n        <Button content='Check' onClick={handleCheckClick} className='h-10 w-24' />\n\n        <Button\n          content='retry'\n          onClick={handleRetryTestClick}\n          className='flex flex-col-reverse items-center justify-center gap-1 bg-neutral-600 hover:bg-neutral-700 active:bg-neutral-800'\n        >\n          <Retry className='size-4' />\n        </Button>\n\n        <Button\n          content='Next'\n          onClick={handleNextTestClick}\n          className='h-10 w-24 bg-green-600 hover:bg-green-700 active:bg-green-800'\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":["Button","props","content","onClick","disabled","children","className","jsxs","clsx","Input","value","setValue","type","placeholder","jsx","e","Retry","color","title","VInCircle","fillColor","borderColor","XMark","singularAnimals","Category","pluralAnimals","animals","bodyRelation","colors","countries","drinks","food","greetings","jobs","other","questions","allWords","getRandomObjects","arr","itemsCount","randomObjects","copyArr","i","randomIndex","selectWeightedItem","data","getItemWeight","maxWeight","totalWeight","sum","item","randomValue","SelectionStrategies","SELECTION_STRATEGIES","wordCount","selectedWords","currentlySelectedWord","word","selectKWords","strategy","strategyMethod","wordsInTestCount","emptyAnswers","TestPage","showResults","setShowResults","useState","shuffleValue","setShuffleValue","wordsScore","setWordsScore","useLocalStorage","w","randomWords","useMemo","answers","setAnswers","handleCheckClick","spelling","index","updatedWordScoresArr","wordScore","handleNextTestClick","prev","handleRetryTestClick","meaning","isCorrectAnswer","prevAnswers"],"mappings":"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"}