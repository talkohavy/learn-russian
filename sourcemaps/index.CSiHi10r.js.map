{"version":3,"file":"index.BLO7PnbO.js","sources":["../../../src/components/svgs/Retry/Retry.tsx","../../../src/components/svgs/VInCircle/VInCircle.tsx","../../../src/components/svgs/XMark/XMark.tsx","../../../src/utils/getRandomObjects.ts","../../../src/utils/selectWeightedItem.ts","../../../src/pages/Test/logic/selectKWords.ts","../../../src/pages/Test/Test.tsx"],"sourcesContent":["type RetryProps = {\n  color?: string;\n  title?: string;\n  className?: string;\n};\n\nexport default function Retry(props: RetryProps) {\n  const { className, color, title = 'retry' } = props;\n\n  return (\n    <svg\n      stroke={color}\n      className={className}\n      version='1.1'\n      viewBox='0 0 41.228 37.1'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <title>{title}</title>\n\n      <path d='m18.533 37.1a18.55 18.55 0 1 1 18-23.1l1.18-1.3a2.0147 2.0147 0 0 1 3 2.69l-4.18 4.53a2 2 0 0 1-3.48-1.34 14.56 14.56 0 1 0-14.52 14.52 14.41 14.41 0 0 0 10.45-4.43 2.0014 2.0014 0 0 1 2.88 2.78 18.38 18.38 0 0 1-13.33 5.65z' />\n      <path d='m35.043 20.55a2 2 0 0 1-0.91-0.22l-4.7-2.41a2.0014 2.0014 0 1 1 1.83-3.56l4.69 2.41a2 2 0 0 1-0.91 3.78z' />\n    </svg>\n  );\n}\n","type VInCircleProps = {\n  color?: string;\n  fillColor?: string;\n  borderColor?: string;\n  title?: string;\n  className?: string;\n};\n\nexport default function VInCircle(props: VInCircleProps) {\n  const { color = 'black', fillColor = 'none', borderColor, title = 'v in a circle', className } = props;\n\n  return (\n    <svg\n      viewBox='0 0 20 20'\n      stroke={color}\n      strokeLinecap='round'\n      strokeLinejoin='round'\n      strokeWidth='1.5'\n      className={className}\n    >\n      <title>{title}</title>\n\n      <circle cx='10' cy='10' r='9' stroke={borderColor || color} fill={fillColor} />\n      <line x1='8.7' y1='13' x2='14.2' y2='7' />\n      <line x1='5.9' y1='10.33' x2='8.7' y2='13' />\n    </svg>\n  );\n}\n","type XMarkProps = {\n  color?: string;\n  title?: string;\n  className?: string;\n};\n\nexport default function XMark(props: XMarkProps) {\n  const { color = 'currentColor', className, title = 'x mark' } = props;\n\n  return (\n    <svg viewBox='0 0 100 100' strokeWidth={8} stroke={color} strokeLinecap='round' className={className}>\n      <title>{title}</title>\n\n      <line x1='20' y1='20' x2='80' y2='80' />\n      <line x1='20' y1='80' x2='80' y2='20' />\n    </svg>\n  );\n}\n","function getRandomObjects<T = any>(arr: Array<T>, itemsCount = 10) {\n  if (arr.length <= itemsCount) return arr;\n\n  const randomObjects: Array<T> = [];\n\n  const copyArr = [...arr];\n\n  for (let i = 0; i < itemsCount; i++) {\n    const randomIndex = Math.floor(Math.random() * copyArr.length);\n\n    randomObjects.push(copyArr.splice(randomIndex, 1)[0]!);\n  }\n\n  return randomObjects;\n}\n\nexport { getRandomObjects };\n","type SelectWeightedItemProps<T> = {\n  data: Array<T>;\n  getItemWeight: (obj: T) => number;\n  maxWeight: number;\n};\n\nexport function selectWeightedItem<T = any>(props: SelectWeightedItemProps<T>) {\n  const { data, getItemWeight, maxWeight } = props;\n\n  const totalWeight = data.reduce((sum, item) => sum + (maxWeight - getItemWeight(item) + 1), 0);\n\n  let randomValue = Math.random() * totalWeight;\n\n  for (const item of data) {\n    randomValue -= maxWeight - getItemWeight(item) + 1;\n    if (randomValue <= 0) return item;\n  }\n}\n","import { MAX_WEIGHT } from '@src/utils/constants';\nimport { getRandomObjects } from '@src/utils/getRandomObjects';\nimport { selectWeightedItem } from '@src/utils/selectWeightedItem';\nimport type { Word } from '@src/utils/types';\n\nexport enum SelectionStrategies {\n  EvenChance = 'even-chance',\n  Knowledge = 'knowledge',\n}\n\ntype StrategyProps = {\n  data: Array<Word>;\n  wordCount: number;\n};\n\nconst SELECTION_STRATEGIES = {\n  [SelectionStrategies.EvenChance]: (props: StrategyProps) => {\n    const { data } = props;\n\n    const result = getRandomObjects<Word>(data);\n\n    return result;\n  },\n  [SelectionStrategies.Knowledge]: (props: StrategyProps) => {\n    const { data, wordCount } = props;\n\n    if (data.length <= wordCount) return data;\n\n    const selectedWords: Array<Word> = [];\n\n    for (let i = 0; i < wordCount; i++) {\n      const currentlySelectedWord = selectWeightedItem<Word>({\n        data,\n        maxWeight: MAX_WEIGHT,\n        getItemWeight: (item: any) => item.points,\n      })!;\n\n      if (!selectedWords.find((word) => word.meaning === currentlySelectedWord?.meaning)) {\n        selectedWords.push(currentlySelectedWord);\n      } else {\n        i--;\n      }\n    }\n\n    return selectedWords;\n  },\n};\n\ntype SelectKWordsProps = {\n  data: Array<Word>;\n  wordCount?: number;\n  strategy?: SelectionStrategies;\n};\n\nfunction selectKWords(props: SelectKWordsProps) {\n  const { data, wordCount = 10, strategy = SelectionStrategies.EvenChance } = props;\n\n  const strategyMethod = SELECTION_STRATEGIES[strategy];\n\n  const selectedWords = strategyMethod({ data, wordCount });\n\n  return selectedWords;\n}\n\nexport { selectKWords };\n","import { useEffect, useMemo, useState } from 'react';\nimport Button from '@src/components/Button';\nimport Input from '@src/components/Input';\nimport Retry from '@src/components/svgs/Retry';\nimport VInCircle from '@src/components/svgs/VInCircle';\nimport XMark from '@src/components/svgs/XMark';\nimport { indexDBClient } from '@src/main';\nimport { MAX_WEIGHT } from '@src/utils/constants';\nimport type { Word } from '@src/utils/types';\nimport { SelectionStrategies, selectKWords } from './logic/selectKWords';\n\nconst wordsInTestCount = 10;\nconst emptyAnswers = Array.from(Array(wordsInTestCount)).map(() => '');\n\nexport default function TestPage() {\n  const [allWords, setAllWords] = useState<Array<Word>>([]);\n  const [showResults, setShowResults] = useState<boolean>();\n\n  const [wordsWithUpdatedScore, setWordsWithUpdatedScore] = useState<Array<Word>>([]);\n\n  const randomWords = useMemo(\n    () => selectKWords({ data: allWords, strategy: SelectionStrategies.Knowledge, wordCount: wordsInTestCount }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [allWords],\n  );\n\n  const [answers, setAnswers] = useState<Array<string>>(() => emptyAnswers);\n\n  const handleCheckClick = () => {\n    setShowResults(true);\n\n    const wordsToUpdateArr: Array<Word> = [];\n\n    randomWords.forEach((randomWord, index) => {\n      const { id, spelling } = randomWord;\n\n      const isCorrectAnswer = spelling === answers[index];\n\n      if (!isCorrectAnswer) return;\n\n      const wordWithUpdatedScore: Word = { ...randomWord, points: Math.min(randomWord.points + 1, MAX_WEIGHT) };\n\n      // 1. This is for updating the in memory allWords\n      wordsToUpdateArr.push(wordWithUpdatedScore);\n\n      // 2. This is for updating the Database\n      // NOTE! The update will only be relevant on page load!\n      indexDBClient.update(id!, wordWithUpdatedScore);\n    });\n\n    setWordsWithUpdatedScore(wordsToUpdateArr);\n  };\n\n  useEffect(() => {\n    async function fetchAllWords() {\n      const fetchedWords = (await indexDBClient.readAll()) as Array<Word>;\n\n      setAllWords(fetchedWords);\n    }\n\n    fetchAllWords();\n  }, []);\n\n  const handleNextTestClick = () => {\n    setAnswers(emptyAnswers);\n    setShowResults(false);\n\n    setAllWords((prevAllWords) =>\n      prevAllWords.map((prevWord) => {\n        const wordWithUpdatedScore = wordsWithUpdatedScore.find((w) => w.id === prevWord.id);\n\n        return wordWithUpdatedScore ?? prevWord;\n      }),\n    );\n  };\n\n  const handleRetryTestClick = () => {\n    setAnswers(emptyAnswers);\n    setShowResults(false);\n  };\n\n  if (!allWords.length) return <div>Loading...</div>;\n\n  return (\n    <div className='flex size-full flex-col items-center justify-center gap-10 p-6'>\n      <div className='flex w-full max-w-md flex-col gap-3 rounded-md border p-4'>\n        {randomWords.map(({ spelling, meaning, soundsLike }, index) => {\n          const isCorrectAnswer = spelling === answers[index];\n\n          return (\n            <div key={index} className='flex h-10 w-full items-center justify-between gap-10'>\n              <div title={soundsLike}>{meaning[0]}</div>\n\n              <div className='flex h-full items-center gap-2'>\n                <Input\n                  value={answers[index]!}\n                  setValue={(value) => setAnswers((prevAnswers) => prevAnswers.with(index, value))}\n                  className='!w-52'\n                />\n\n                <div className='h-full w-12'>\n                  {showResults && (\n                    <div className='flex h-full items-center justify-center'>\n                      {isCorrectAnswer ? (\n                        <VInCircle className='h-1/2' borderColor='#19d23a' color='#19d23a' title={spelling} />\n                      ) : (\n                        <XMark className='h-1/2 stroke-red-500' title={spelling} />\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className='flex w-full max-w-md items-center justify-between gap-4'>\n        <Button content='Check' onClick={handleCheckClick} className='h-10 w-24' />\n\n        <Button\n          content='retry'\n          onClick={handleRetryTestClick}\n          className='flex flex-col-reverse items-center justify-center gap-1 bg-neutral-600 hover:bg-neutral-700 active:bg-neutral-800'\n        >\n          <Retry className='size-4' />\n        </Button>\n\n        <Button\n          content='Next'\n          onClick={handleNextTestClick}\n          className='h-10 w-24 bg-green-600 hover:bg-green-700 active:bg-green-800'\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":["Retry","props","className","color","title","jsxs","jsx","VInCircle","fillColor","borderColor","XMark","getRandomObjects","arr","itemsCount","randomObjects","copyArr","i","randomIndex","selectWeightedItem","data","getItemWeight","maxWeight","totalWeight","sum","item","randomValue","SelectionStrategies","SELECTION_STRATEGIES","wordCount","selectedWords","currentlySelectedWord","MAX_WEIGHT","word","selectKWords","strategy","strategyMethod","wordsInTestCount","emptyAnswers","TestPage","allWords","setAllWords","useState","showResults","setShowResults","wordsWithUpdatedScore","setWordsWithUpdatedScore","randomWords","useMemo","answers","setAnswers","handleCheckClick","wordsToUpdateArr","randomWord","index","id","spelling","wordWithUpdatedScore","indexDBClient","useEffect","fetchAllWords","fetchedWords","handleNextTestClick","prevAllWords","prevWord","w","handleRetryTestClick","meaning","soundsLike","isCorrectAnswer","Input","value","prevAnswers","Button"],"mappings":"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"}